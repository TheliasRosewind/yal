package analyse;

import java.util.*;
import arbre.* ;
import arbre.bloc.* ;
import arbre.expressions.* ;
import arbre.expressions.unaires.* ;
import arbre.expressions.binaires.* ;
import arbre.expressions.binaires.logiques.* ;
import arbre.expressions.binaires.arithmetiques.* ;
import arbre.instructions.* ;
import arbre.instructions.conditionnelles.* ;
import arbre.instructions.io.*;
import arbre.instructions.boucle.* ;
import arbre.instructions.fonctions.*;
import arbre.instructions.declarations.*;
import exceptions.AnalyseSyntaxiqueException;
import tds.TDS;
import tds.entrees.*;
import tds.symboles.*;
import tds.types.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol PROGRAMME, DEBUT, FIN, FONCTION, POINTVIRGULE, RETOURNE, ECRIRE, EGAL, LIRE, PLUS, MOINS, MULT, DIV, EGALEGAL, DIFF, INF, SUPP, NON, ET, OU, SI, ALORS, SINON, FINSI, TANTQUE, REPETER, FINTANTQUE, POUV, PFER ;
terminal String IDF, CSTENTIERE, TYPE ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, ECR, AFF, LDECL, DECLVAR, DECLFONC, LIR, RET;
non terminal Expression EXP ;

precedence left ET, OU;
precedence left EGALEGAL, DIFF;
precedence left INF, SUPP;
precedence left PLUS, MOINS;
precedence left MULT, DIV;
precedence left NON;
precedence left POUV;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME IDF DEBUT LDECL:ld LINST:li FIN
                {: Programme p = new Programme();
                p.ajouter(li);
                RESULT = p ; :}
                |
                PROGRAMME IDF DEBUT LINST:li FIN
                {: Programme p = new Programme();
                p.ajouter(li);
                RESULT = p; :}
                ;

LDECL   ::=     DECLVAR:dv
                |
                DECLFONC:df
                |
                LDECL:ld DECLVAR:dv
                |
                LDECL:ld DECLFONC:df
                ;

DECLVAR  ::=    TYPE:t IDF:i POINTVIRGULE
                {: int dep = TDS.getInstance().newDeplacement() ;
                   TDS.getInstance().ajouter(new EntreeVariable(i, ileft + 1), new SymboleVariable(dep, t)) ;
                   RESULT = new Declaration(t, i, ileft + 1) ; :}
                ;

DECLFONC ::=    FONCTION IDF:i POUV PFER DEBUT LINST:li FIN
                {:
                int num = TDS.getInstance().nextCompteur(TypesCompteurs.FONCTIONS);
                TDS.getInstance().ajouter(new EntreeFonction(i,ileft+1), new SymboleFonction(num));
                RESULT = new Fonction(i, li, ileft + 1);
                :}
                ;

LINST   ::=     LINST:li INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
                |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECR:e POINTVIRGULE
                {: RESULT = e ; :}
                |
                AFF:i POINTVIRGULE
                {: RESULT = i ;:}
                |
                LIR:l POINTVIRGULE
                {: RESULT = l ; :}
                |
                RET:r POINTVIRGULE
                {: RESULT = r ; :}
                |
                SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new SiAlors(e, li, eleft+1); :}
                |
                SI EXP:e ALORS LINST:li1 SINON LINST:li2 FINSI
                {: RESULT = new SiAlors(e, li1, li2, eleft+1); :}
                |
                TANTQUE EXP:e REPETER LINST:li FINTANTQUE
                {: RESULT = new Tantque(e, li, eleft+1) ; :}
                ;

ECR     ::=     ECRIRE EXP:e
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                ;

AFF     ::=     IDF:i EGAL EXP:e
                {: RESULT = new Affectation(i, e, ileft + 1) ; :}
                ;

LIR     ::=     LIRE IDF:i
                {: RESULT = new Lire(i, ileft+1) ; :}
                ;

RET    ::=     RETOURNE EXP:e
                {: RESULT = new Retourne(e, eleft + 1); :}
                ;

EXP     ::=     EXP:g PLUS EXP:d
                {: RESULT = new Addition(g, d, gleft+1) ; :}
                |
                EXP:g MOINS EXP:d
                {: RESULT = new Soustraction(g, d, gleft+1) ; :}
                |
                EXP:g MULT EXP:d
                {: RESULT = new Multiplication(g, d, gleft+1) ; :}
                |
                EXP:g DIV EXP:d
                {: RESULT = new Division(g, d, gleft+1) ; :}
                |
                EXP:g EGALEGAL EXP:d
                {: RESULT = new EgalLogique(g, d, gleft+1) ; :}
                |
                EXP:g INF EXP:d
                {: RESULT = new Inferieur(g, d, gleft+1) ; :}
                |
                EXP:g SUPP EXP:d
                {: RESULT = new Superieur(g, d, gleft+1) ; :}
                |
                EXP:g DIFF EXP:d
                {: RESULT = new Different(g, d, gleft+1) ; :}
                |
                MOINS EXP:g
                {: RESULT = new Negatif(g, gleft+1);:}
                |
                NON EXP:g
                {: RESULT = new NonLogique(g, gleft+1);:}
                |
                EXP:g ET EXP:d
                {: RESULT = new EtLogique(g,d,gleft+1); :}
                |
                EXP:g OU EXP:d
                {: RESULT = new OuLogique(g,d,gleft+1); :}
                |
                CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
                |
                IDF:i
                {: RESULT = new Idf(i, ileft + 1) ; :}
                |
                POUV EXP:e PFER
                {: RESULT = e; :}
                |
                IDF:i POUV PFER
                {: RESULT = new AppelFonction(i,ileft+1);:}
                ;